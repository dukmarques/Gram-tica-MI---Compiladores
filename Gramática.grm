! Welcome to GOLD Parser Builder 5.2
"Name"          = 'Gramatica'
"Author"        = 'PBL'
"Version"       = '1.0'
"About"         = 'Mi-Compiladores'
"Start Symbol"  = <Inicio> 
                
! Elementos Terminais
Identificador      =  {Letter}({AlphaNumeric} | '_')* | {CabecaDoIdentificador}{CaudaDoIdentificador}*
Numero          = ( '-' )? {Number}+  ('.'{Number}+ )?
Boolean        =  'true' | 'false'
CadeiaDeCaracteres        = '"' ({StringSimbolos} | '\' {Printable})* '"'
               
!Não Terminais
{CabecaDoIdentificador} = {Letter}
{CaudaDoIdentificador}  = {Alphanumeric} + [_]
{StringSimbolos}= {Printable}-["\]
<numero> ::= Numero                   
<valor> ::= Numero | CadeiaDeCaracteres | Boolean
<elemento> ::= Numero | <id>
<elementotop> ::= CadeiaDeCaracteres | <elemento>
!<tipo> ::= identificador
<id> ::= identificador <vetor> | identificador ! um identificador pode ser um vetor, exemplo int ou int[1]
<vazio> ::= ! jeito que encontrei de fazer o comando vazio
<vetor> ::= '[' <elemento> ']' | '[' <elemento> ']' <vetor> 
<iniciarVetor> ::= '{' <iniciarVetor2> '}' ! cria as chaves externas da inicialização do vetor                
<iniciarVetor2> ::= '(' <iniciarVetor3> ')' |  '(' <iniciarVetor3> ')' <iniciarVetor2> ! cria os parenteses internos da inicialização do vetor                 
<iniciarVetor3> ::= <elementotop> | <elementotop> ',' <iniciarVetor3>       ! preenche cada grupo de parenteses com numeros ex: (1,2,3)


!Definições Básicas
<Inicio> ::= <blococonst> <Classe> | <Classe>
<tipo> ::= 'float' | 'int'| 'string' | 'bool'
!<TipoRetorno> ::= 'float' | 'int'| 'string' | 'bool' | 'void'
<OperadorLogico> ::= '!' | '&&' | '||'
<OperadorRelacional> ::= '!=' | '==' | '<' | '<=' | '>' | '>=' | '='
        
!Classe
<Classe> ::= 'class' <NomeClasse> '{' <Codigo> '}' <Classe> | 'class' <NomeClasse> 'extends' <NomeClasse> '{' <Codigo> '}' <Classe> |
<Codigo> ::= <blocovar> <Codigo> | <Metodo> <Codigo> | <Atribuicao> <Codigo>| <If> <Codigo> | <While> <Codigo> | <Read> <Codigo> | <Write> <Codigo> |
<NomeClasse> ::= Identificador

!Constantes                   
<blococonst> ::= const '{' <inicializarConst> '}' 
<inicializarConst> ::= <tipo> <inicializarVar> ';' <inicializarConst> | <vazio>
<inicializarVar> ::=<id> '=' <valorInicial> | <id>  '=' <valorInicial> ',' <inicializarVar>            
<valorInicial> ::= <valor> | <iniciarVetor> ! um valor pode ser uma string, um boolean, um inteiro por exemplo, ou um conjunto de numeros no caso da inicialização de um vetor

!Variaveis
<blocovar> ::= variables '{' <declararInicializarVar> '}'  
<declararInicializarVar> ::= <tipo> <declararInicializar> ';' <declararInicializarVar> | <vazio>                   
<declararInicializar> ::= <id> | <id>  ',' <declararInicializar> | <id> '=' <valorInicial> | <id>  '=' <valorInicial> ',' <declararInicializar>

                 
!Atributos ! essa parte aqui não precisa utilizar... usa só o bloco variaveis de cima...
<Atributos> ::= 'variables' '{' <MultAtributos> '}' 
<MultAtributos> ::= <Tipos> <DeclaracaoAtributos> ';' <MultAtributos> |           
<DeclaracaoAtributos> ::= <Argumento> ',' <DeclaracaoAtributos> | <Argumento> |
                 
!Métodos
<Metodo> ::= 'method' <Tipo> Identificador '(' <Parametros> ')' '{' <CodigoMetodo> 'return' Identificador ';' '}' 
          | 'method' 'void' Identificador '(' <Parametros> ')' '{' <CodigoMetodo>  '}' 
          | 'method' <Tipo> Identificador '(' <Parametros> ')' '{' <CodigoMetodo> 'return' '(' Identificador ')' ';' '}'
<CodigoMetodo> ::= <blocovar> <Codigo> | <Metodo> <Codigo> | <Atribuicao> <Codigo>| <If> <Codigo> | <While> <Codigo> | <Read> <Codigo> | <Write> <Codigo> |
<Parametros> ::= <Tipos> <Argumento> ',' <Parametros> | <Tipos> <Argumento> |

!Aleatorios          
<Atribuicao> ::= Identificador '=' Numero ';'
<Argumento> ::= Identificador | <Vetor> | <Matriz>
<Tipos> ::= <Tipo> | <NomeClasse>

!Vetores e Matrizes
<Vetor> ::= Identificador '[' <Valores> ']'         
<Matriz> ::= Identificador '[' <Valores> ']' '[' <Valores> ']'          
<Valores> ::= Identificador | Numero

!If
<If> ::= 'if' '(' <Expressao> ')' 'then' '{' <Codigo> '}'
      | 'if' '(' <Expressao> ')' 'then' '{' <Codigo> '}' 'else' '{' <Codigo> '}'
      | 'if' '(' <Expressao> ')' 'then' '{' <Codigo> '}' 'else' <If>
<Expressao> ::= <Valor> <OperadorRelacional> <Valor>
             |<Valor> <OperadorRelacional> <Valor> <OperadorLogico> <Expressao>             
<Valor> ::= Identificador | Numero

!While
<While> ::= 'while' '(' <Expressao> ')' '{' <Codigo> '}'

!Read e Write
<Read> ::= 'read' '(' <ParametrosLeitura> ')' ';'
<ParametrosLeitura> ::= <Argumento> ',' <ParametrosLeitura> | <Argumento>        
<Write> ::= 'write' '(' <ParametrosEscrita> ')' ';'
<ParametrosEscrita> ::= <Argumento> ',' <ParametrosEscrita> | <Argumento> | '"' Identificador '"'
         
