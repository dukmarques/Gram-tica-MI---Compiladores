"Name"           = 'RICHARD'
"Author"         = 'João Victor, Eduardo Marques, Gustavo Henrique, Marcos Aldrey, Marcos Vinicius, Alyson, Alisson, André, Gilvaney, Nielson, Lucas Cardoso'
"Version"        = 'The version of the grammar and/or language'
"About"          = 'A short description of the grammar'
"Case Sensitive" = 'True'

"Start Symbol"   = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
Identifier   = {Letter}({AlphaNumeric} | '_')*
NumberTerminal       = {Number}+('.'{Number}+)?

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below
<Program>                     ::= <Class> <Program> | <Constants> <Program> |

<Arithmetic>                  ::= '+' <Expression> | '-' <Expression> |

<Expr Arit>                   ::= <Mult Exp> <Arithmetic>

<Multiple>                    ::= '*' <Expression> | '/' <Expression> |
                        
<Mult Exp>                    ::= <Negate Exp> <Multiple>
                        
<Expression>                  ::= '(' <Expr Arit> ')' | <Expr Arit>
                        
<Negate Exp>                  ::= '-' <Initial Value> | <Initial Value>
                    
<Relational Operator>         ::= '!=' | '==' | '<' | '<=' | '>' | '>='
                       
<Logic Operator>              ::= '&&' | '||'

<Negate>                      ::= '!' <Negate> |

<Relational Logic>            ::= <Relational Operator> <Condition> | <Logic Operator> <Condition> |

<Condition>                   ::= '(' <Condition> ')' <Relational Logic> | <Negate> <Expression> <Relational Logic>

!Add more values to the rule below - as needed

<Value>                       ::= 'true' | 'false' | StringLiteral | NumberTerminal

<Array Position>              ::= <Expression> |

<Array>                       ::= '[' <Array Position> ']' <Array>  |
          
<Init Array>                  ::= '{' <Init Array_2> '}'
                
<Init Array_2>                ::= '(' <Init Array_3> ')' |  '(' <Init Array_3> ')' <Init Array_2>
                 
<Init Array_3>                ::= <Initial Value> | <Initial Value> ',' <Init Array_3>

<Declaration>                 ::= <Type> <Valid Identifier>

<Valid Identifier>            ::= Identifier <Array>

<Type>                        ::= 'string' | 'int' | 'float' | 'bool' | 'void' | Identifier

<Identifier With Attributes>  ::= <Valid Identifier> <Attribute Access>
                        
<Attribute Access>            ::= '.' <Identifier With Attributes> |

<Call Arguments>              ::= '(' <Arguments> ')' |

<Valid Values>                ::= <Value> | <Identifier With Attributes> <Call Arguments>
                        
<Method Call>                 ::= <Identifier With Attributes> '(' <Arguments> ')'
                        
<Initial Value>               ::= <Init Array> | <Valid Values> <Increment-Decrement>
                               
<Increment-Decrement>         ::= '++' <Increment-Decrement> | '--' <Increment-Decrement> |

<Multiple Identifier>         ::= ',' <Valid Identifier> <Multiple Identifier> |

<Initialize Constant>         ::= <Multiple Identifier> '=' <Expression> <Initialize Constant> |

<Constant Assignment>         ::= <Declaration> '=' <Expression> <Initialize Constant> ';' <Constant Assignment> |

<Initialize>                  ::= '=' <Expression> |

<Initialize Variable>         ::= <Multiple Identifier> <Initialize>
                        
<Variable Assignment>         ::=  <Declaration> <Initialize> <Initialize Variable> ';' <Variable Assignment> |

<Constants>                   ::= 'const' '{' <Constant Assignment> '}'
                        
<Variables>                   ::= 'variables' '{' <Variable Assignment> '}'
                        
<Extends>                     ::= 'extends' Identifier |
                        
<Class Code>                  ::= <Variables> <Class Code> | <Methods> <Class Code> |

<Class>                       ::= 'class' Identifier <Extends> '{' <Class Code> '}'

<Parameters>                  ::= <Declaration> <Parameter> |

<Parameter>                   ::= ',' <Parameters> |

<Methods>                     ::= 'method' <Declaration> '(' <Parameters> ')' <Code Block>

<Code Block>                  ::= '{' <Code Statements> '}'

<Code Statements>             ::= <If-Block> <Code Statements> | <Looping-Block> <Code Statements>
                               | <Line Code> ';' <Code Statements> | <Variables> <Code Statements> |
                        
<Argument>                    ::=  ',' <Initial Value> <Argument> |
                        
<Arguments>                   ::= <Initial Value> <Argument> |
                        
<Return Statement>            ::= <Condition> | '(' <Return Statement> ')' |
                               
<Attributition>               ::= '=' <Expression> | <Increment-Decrement>

<Execute Line>                ::= <Call Arguments> | <Attributition>

<Line Code>                   ::= 'return' <Return Statement> | <Read> | <Write> | <Identifier With Attributes> <Execute Line>
                        
<If-Block>                    ::= 'if' '(' <Condition> ')' 'then' <Code Block> <Else-Block>
                       
<Else-Block>                  ::= 'else' <Post-Else-Block> |

<Post-Else-Block>             ::= <If-Block> | <Code Block> |
                        
<Looping-Block>               ::= 'while' '(' <Condition> ')' <Code Block>

<Read>                        ::= 'read' '(' <Valid Values> <Read Parameters> ')'
                        
<Read Parameters>             ::= ',' <Valid Values> <Read Parameters> |
                           
<Write>                       ::= 'write' '(' <Write Parameters> ')'
                        
<To-Write>                    ::= ',' <Valid Values> <To-Write> | ',' <Method Call> <To-Write> |

<Write Parameters>            ::= <Valid Values> <To-Write> | <Method Call> <To-Write>
