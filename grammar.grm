"Name"     = 'Enter the name of the grammar'
"Author"   = 'Enter your name'
"Version"  = 'The version of the grammar and/or language'
"About"    = 'A short description of the grammar'

"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
Identifier   = {Letter}({AlphaNumeric} | '_')*

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below
<Program>              ::= <Class> | <Constants>

<Expression>           ::= <Add Exp> '>'  <Expression> 
                        |  <Add Exp> '<'  <Expression> 
                        |  <Add Exp> '<=' <Expression> 
                        |  <Add Exp> '>=' <Expression>
                        |  <Add Exp> '==' <Expression>    !Equal
                        |  <Add Exp> '!=' <Expression>    !Not equal
                        |  <Add Exp> '&&' <Expression>
                        |  <Add Exp> '||' <Expression>
                        |  '!' <Expression>
                        |  <Add Exp> 
                        |

<Add Exp>              ::= <Mult Exp> '+' <Add Exp>
                        |  <Mult Exp> '-' <Add Exp>
                        |  <Mult Exp> '++' <Add Exp>
                        |  <Mult Exp> '--' <Add Exp>
                        |  <Mult Exp> 
                        |

<Mult Exp>             ::= <Expression> '*' <Mult Exp> 
                        |  <Expression> '/' <Mult Exp> 
                        |  <Expression> 
                        |

!Add more values to the rule below - as needed

<Value>                ::= Identifier |  '(' <Expression> ')' | 'true' | 'false'

<Empty Value>          ::= <Value> |
                        
<Initial Value>        ::= <Value> | <Init Array> ! um valor pode ser uma string, um boolean, um inteiro por exemplo, ou um conjunto de numeros no caso da inicialização de um vetor
          
<Init Array>           ::= '{' <Init Array_2> '}' ! cria as chaves externas da inicialização do vetor
                
<Init Array_2>         ::= '(' <Init Array_3> ')' |  '(' <Init Array_3> ')' <Init Array_2> ! cria os parenteses internos da inicialização do vetor
                 
<Init Array_3>         ::= <Value> | <Value> ',' <Init Array_3>       ! preenche cada grupo de parenteses com numeros ex: (1,2,3)

<Declaration>          ::= <Type> Identifier

<Type>                 ::= 'string' | 'int' | 'void' | 'boolean' | Identifier

<Attributition>        ::= ',' Identifier '=' <Value> | ',' Identifier '=' <Value> <Attributition>

<Constant Assignment>  ::= <Declaration> '=' <Value> <Attributition> ';' <Constant Assignment> |

<Initialize>           ::= '=' <Value> |
                        
<Variable Assignment>  ::= <Declaration> <Initialize> ';' | <Declaration> <Initialize> ',' Identifier <Initialize> | <Variable Assignment> ';'

<Constants>            ::= 'constant' '{' <Constant Assignment> '}'
                        
<Variables>            ::= <Variable> <Variables> |
                        
<Variable>             ::= 'variables' '{' <Variable Assignment> '}'
                        
<Extends>              ::= 'extends' Identifier |

<Class>                ::= 'class' Identifier <Extends> '{' <Variables> | <Methods> '}'

<Parameters>           ::= <Declaration> <Parameter>

<Parameter>            ::= ',' <Parameters> |

<Methods>              ::= <Method> <Methods> |

<Method>               ::= 'method' <Declaration> '(' <Parameters> ')' <Code Block>

<Code Block>           ::= '{' <Code Statements> '}'

<Code Statements>      ::= <If-Block> <Code Statements> | <Looping-Block> <Code Statements>
                        | <Line Code> <Code Statements> |
                        
<Condition>            ::= <Expression> | <Method Call>
                        
<Method Call>          ::= Identifier '.' Identifier '(' <Arguments> ')' | Identifier '(' <Arguments> ')'
                        
<Arguments>            ::= <Initial Value> | ',' <Initial Value> |

<Line Code>            ::= <Expression> ';' | 'return' <Empty Value> ';' | <Method Call> ';'
                        
<If-Block>             ::= 'if' '(' <Condition> ')' 'then' <Code Block> <Else-Block>
                       
<Else-Block>           ::= 'else' <Post-Else-Block>

<Post-Else-Block>      ::= <If-Block> | <Code Block> |
                        
<Looping-Block>        ::= 'while' '(' <Condition> ')' <Code Block>
