"Name"     = 'RICHARD'
"Author"   = 'João Victor, Eduardo Marques, Gustavo Henrique, Marcos Aldrey, Marcos Vinicius, Alyson, Alisson, André, Gilvaney, Nielson'
"Version"  = 'The version of the grammar and/or language'
"About"    = 'A short description of the grammar'

"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
Identifier   = {Letter}({AlphaNumeric} | '_')*
NumberTerminal       = {Number}+('.'{Number}+)?

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below
<Program>              ::= <Class> | <Constants>

<Expr Arit>            ::= <Mult Exp> '+' <Expr Arit> | <Mult Exp> '-' <Expr Arit> | <Mult Exp> 
<Mult Exp>             ::= <Negate Exp> '*' <Mult Exp> | <Negate Exp> '/' <Mult Exp> | <Negate Exp> 
<Valor Exp>            ::= <Value> | '('<Expr Arit>')'
<Negate Exp>           ::= '-' <Valor Exp> | <Valor Exp>
                        |

<Expression>           ::= <Valor Exp>

!Add more values to the rule below - as needed

<Value>                ::= Identifier | 'true' | 'false' | StringLiteral | NumberTerminal

<Empty Value>          ::= <Value> |
                        
<Initial Value>        ::= <Value> | <Init Array> ! um valor pode ser uma string, um boolean, um inteiro por exemplo, ou um conjunto de numeros no caso da inicialização de um vetor

<Array>                ::= '[' <Expression> ']' <Array>  |
          
<Init Array>           ::= '{' <Init Array_2> '}' ! cria as chaves externas da inicialização do vetor
                
<Init Array_2>         ::= '(' <Init Array_3> ')' |  '(' <Init Array_3> ')' <Init Array_2> ! cria os parenteses internos da inicialização do vetor
                 
<Init Array_3>         ::= <Value> | <Value> ',' <Init Array_3>       ! preenche cada grupo de parenteses com numeros ex: (1,2,3)

<Declaration>          ::= <Type> <Valid Identifier>

<Valid Identifier>     ::= Identifier <Array>

<Type>                 ::= 'string' | 'int' | 'void' | 'boolean' | Identifier

<Multiple Identifier>  ::= ',' <Valid Identifier>

<Attributition>        ::= <Multiple Identifier> '=' <Initial Value> <Attributition> |

<Constant Assignment>  ::= <Declaration> '=' <Initial Value> <Attributition> ';' <Constant Assignment> |

<Initialize>           ::= '=' <Initial Value> |

<Initialize Variable>  ::= <Multiple Identifier> <Initialize> |
                        
<Variable Assignment>  ::=  <Declaration> <Initialize> <Initialize Variable> ';' <Variable Assignment> |

<Constants>            ::= 'constant' '{' <Constant Assignment> '}'
                        
<Variables>             ::= 'variables' '{' <Variable Assignment> '}'
                        
<Extends>              ::= 'extends' Identifier |

<Class>                ::= 'class' Identifier <Extends> '{' <Variables> | <Methods> '}'

<Parameters>           ::= <Declaration> <Parameter>

<Parameter>            ::= ',' <Parameters> |

<Methods>              ::= <Method> <Methods> |

<Method>               ::= 'method' <Declaration> '(' <Parameters> ')' <Code Block>

<Code Block>           ::= '{' <Code Statements> '}'

<Code Statements>      ::= <If-Block> <Code Statements> | <Looping-Block> <Code Statements>
                        | <Line Code> <Code Statements> |
                        
<Condition>            ::= <Expression> | <Method Call>
                        
<Method Call>          ::= Identifier '.' Identifier '(' <Arguments> ')' | Identifier '(' <Arguments> ')'
                        
<Arguments>            ::= <Initial Value> | ',' <Initial Value> |

<Line Code>            ::= <Expression> ';' | 'return' <Empty Value> ';' | <Method Call> ';'
                        
<If-Block>             ::= 'if' '(' <Condition> ')' 'then' <Code Block> <Else-Block>
                       
<Else-Block>           ::= 'else' <Post-Else-Block>

<Post-Else-Block>      ::= <If-Block> | <Code Block> |
                        
<Looping-Block>        ::= 'while' '(' <Condition> ')' <Code Block>

<Read>                 ::= 'read' '(' <ParametrosLeitura> ')' ';'
<ParametrosLeitura>    ::= <Arguments> ',' <ParametrosLeitura> | <Acesso a atributo>',' <ParametrosLeitura> 
                        | <Acesso a atributo> | <Argumento>        
<Write>                ::= 'write' '(' <ParametrosEscrita> ')' ';'
<ParametrosEscrita>    ::= <Arguments> ',' <ParametrosEscrita> |  <Acesso a atributo>',' <ParametrosEscrita> 
                        | <Acesso a atributo>  | <Argumento> | '"' Identificador '"'
