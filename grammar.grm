"Name"     = 'Enter the name of the grammar'
"Author"   = 'Enter your name'
"Version"  = 'The version of the grammar and/or language'
"About"    = 'A short description of the grammar'

"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
Identifier   = {Letter}({AlphaNumeric} | '_')*

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The grammar starts below
<Program>              ::= <Class> | <Constants> | <Program>

<Expression>           ::= <Expression> '>'  <Add Exp> 
                        |  <Expression> '<'  <Add Exp> 
                        |  <Expression> '<=' <Add Exp> 
                        |  <Expression> '>=' <Add Exp>
                        |  <Expression> '==' <Add Exp>    !Equal
                        |  <Expression> '!=' <Add Exp>    !Not equal
                        |  <Add Exp> 

<Add Exp>              ::= <Add Exp> '+' <Mult Exp>
                        |  <Add Exp> '-' <Mult Exp>
                        |  <Mult Exp> 
                        |  <Add Exp> '++' <Mult Exp>

<Mult Exp>             ::= <Mult Exp> '*' <Expression> 
                        |  <Mult Exp> '/' <Expression> 
                        |  <Expression> 

!Add more values to the rule below - as needed

<Value>                ::= Identifier
                           |  '(' <Expression> ')' | 'true' | 'false'

<Declaration>          ::= <Type> + Identifier

<Type>                 ::= 'string' | 'int' | 'void' | 'boolean' | Identifier

<Constant Assignment>  ::= <Declaration> + '=' + <Value> + [',' + Identifier + '=' <Value>]*

<Variable Assignment>  ::= <Declaration> + [['=' <Value>] + ',' + Identifier ['=' <Value>]]*

<Constants>            ::= 'constant' + '{' + {<Constant Assignment> + ';'} + '}'
                        
<Variables>            ::= <Variable> + <Variables> |

<Variable>             ::= 'variables' + '{' + {<Variable Assignment> + ';'} + '}'

<Class>                ::= 'class' + Identifier + ['extends' Identifier] + '{' + <Variables> | <Methods> + '}'

<Parameters>           ::= <Type> + Identifier + [',' + <Parameters>]*

<Methods>              ::= <Method> + <Methods> |

<Method>               ::= 'method' + <Type> + Identifier + '(' + <Parameters> + ')' + <Code Block>

<Code Block>           ::= '{' + <Code Statements> + '}'

<Code Statements>      ::= <If-Block> + [<Code Statements>] | <Looping-Block> + [<Code Statements>]
                        | <Line Code> + [<Code Statements>]

<Line Code>            ::= <Expression> + ';' | 'return' + [<Value>] + ';'
                        
<If-Block>             ::= 'if' + ['('] + <Condition> + [')'] + 'then' + <Code Block> + [<Else-Block>]
                       
<Else-Block>           ::= 'else' + <If-Block> | 'else' + <Code Block>
                        
<Looping-Block>        ::= 'while' + ['('] + [')']
